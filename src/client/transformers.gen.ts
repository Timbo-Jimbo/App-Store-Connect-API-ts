// This file is auto-generated by @hey-api/openapi-ts

import type { AlternativeDistributionDomainsGetCollectionResponse, AlternativeDistributionDomainsCreateInstanceResponse, AlternativeDistributionDomainsGetInstanceResponse, AlternativeDistributionPackageDeltasGetInstanceResponse, AlternativeDistributionPackageVariantsGetInstanceResponse, AlternativeDistributionPackageVersionsGetInstanceResponse, AlternativeDistributionPackagesCreateInstanceResponse, AlternativeDistributionPackagesGetInstanceResponse, AnalyticsReportInstancesGetInstanceResponse, AppAvailabilitiesV2CreateInstanceResponse, AppAvailabilitiesV2GetInstanceResponse, AppEncryptionDeclarationsGetCollectionResponse, AppEncryptionDeclarationsCreateInstanceResponse, AppEncryptionDeclarationsGetInstanceResponse, AppEventsCreateInstanceResponse, AppEventsGetInstanceResponse, AppEventsUpdateInstanceResponse, AppStoreVersionExperimentTreatmentsCreateInstanceResponse, AppStoreVersionExperimentTreatmentsGetInstanceResponse, AppStoreVersionExperimentTreatmentsUpdateInstanceResponse, AppStoreVersionExperimentsV2CreateInstanceResponse, AppStoreVersionExperimentsV2GetInstanceResponse, AppStoreVersionExperimentsV2UpdateInstanceResponse, AppStoreVersionExperimentsCreateInstanceResponse, AppStoreVersionExperimentsGetInstanceResponse, AppStoreVersionExperimentsUpdateInstanceResponse, AppStoreVersionPhasedReleasesCreateInstanceResponse, AppStoreVersionPhasedReleasesUpdateInstanceResponse, AppStoreVersionSubmissionsCreateInstanceResponse, AppStoreVersionsCreateInstanceResponse, AppStoreVersionsGetInstanceResponse, AppStoreVersionsUpdateInstanceResponse, BetaAppReviewSubmissionsGetCollectionResponse, BetaAppReviewSubmissionsCreateInstanceResponse, BetaAppReviewSubmissionsGetInstanceResponse, BetaBuildLocalizationsGetCollectionResponse, BetaBuildLocalizationsCreateInstanceResponse, BetaBuildLocalizationsGetInstanceResponse, BetaBuildLocalizationsUpdateInstanceResponse, BetaGroupsGetCollectionResponse, BetaGroupsCreateInstanceResponse, BetaGroupsGetInstanceResponse, BetaGroupsUpdateInstanceResponse, BuildBetaDetailsGetCollectionResponse, BuildBetaDetailsGetInstanceResponse, BuildBetaDetailsUpdateInstanceResponse, BuildsGetCollectionResponse, BuildsGetInstanceResponse, BuildsUpdateInstanceResponse, CertificatesGetCollectionResponse, CertificatesCreateInstanceResponse, CertificatesGetInstanceResponse, CiBuildActionsGetInstanceResponse, CiBuildRunsCreateInstanceResponse, CiBuildRunsGetInstanceResponse, CiProductsGetCollectionResponse, CiProductsGetInstanceResponse, CiWorkflowsCreateInstanceResponse, CiWorkflowsGetInstanceResponse, CiWorkflowsUpdateInstanceResponse, CustomerReviewResponsesCreateInstanceResponse, CustomerReviewResponsesGetInstanceResponse, CustomerReviewsGetInstanceResponse, DevicesGetCollectionResponse, DevicesCreateInstanceResponse, DevicesGetInstanceResponse, DevicesUpdateInstanceResponse, GameCenterLeaderboardEntrySubmissionsCreateInstanceResponse, GameCenterLeaderboardsCreateInstanceResponse, GameCenterLeaderboardsGetInstanceResponse, GameCenterLeaderboardsUpdateInstanceResponse, GameCenterPlayerAchievementSubmissionsCreateInstanceResponse, InAppPurchaseContentsGetInstanceResponse, MarketplaceDomainsGetCollectionResponse, MarketplaceDomainsCreateInstanceResponse, MarketplaceDomainsGetInstanceResponse, ProfilesGetCollectionResponse, ProfilesCreateInstanceResponse, ProfilesGetInstanceResponse, ReviewSubmissionsGetCollectionResponse, ReviewSubmissionsCreateInstanceResponse, ReviewSubmissionsGetInstanceResponse, ReviewSubmissionsUpdateInstanceResponse, RoutingAppCoveragesCreateInstanceResponse, RoutingAppCoveragesGetInstanceResponse, RoutingAppCoveragesUpdateInstanceResponse, ScmGitReferencesGetInstanceResponse, ScmPullRequestsGetInstanceResponse, ScmRepositoriesGetCollectionResponse, ScmRepositoriesGetInstanceResponse, SubscriptionIntroductoryOffersCreateInstanceResponse, SubscriptionIntroductoryOffersUpdateInstanceResponse, SubscriptionOfferCodeCustomCodesCreateInstanceResponse, SubscriptionOfferCodeCustomCodesGetInstanceResponse, SubscriptionOfferCodeCustomCodesUpdateInstanceResponse, SubscriptionOfferCodeOneTimeUseCodesCreateInstanceResponse, SubscriptionOfferCodeOneTimeUseCodesGetInstanceResponse, SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceResponse, SubscriptionPricesCreateInstanceResponse, TerritoryAvailabilitiesUpdateInstanceResponse, UserInvitationsGetCollectionResponse, UserInvitationsCreateInstanceResponse, UserInvitationsGetInstanceResponse, WinBackOffersCreateInstanceResponse, WinBackOffersGetInstanceResponse, WinBackOffersUpdateInstanceResponse, AlternativeDistributionPackageVersionsDeltasGetToManyRelatedResponse, AlternativeDistributionPackageVersionsVariantsGetToManyRelatedResponse, AlternativeDistributionPackagesVersionsGetToManyRelatedResponse, AnalyticsReportsInstancesGetToManyRelatedResponse, AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedResponse, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedResponse, AppPriceSchedulesAutomaticPricesGetToManyRelatedResponse, AppPriceSchedulesManualPricesGetToManyRelatedResponse, AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedResponse, AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedResponse, AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedResponse, AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedResponse, AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedResponse, AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse, AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse, AppStoreVersionsBuildGetToOneRelatedResponse, AppStoreVersionsCustomerReviewsGetToManyRelatedResponse, AppsAppAvailabilityV2GetToOneRelatedResponse, AppsAppEncryptionDeclarationsGetToManyRelatedResponse, AppsAppEventsGetToManyRelatedResponse, AppsAppStoreVersionExperimentsV2GetToManyRelatedResponse, AppsAppStoreVersionsGetToManyRelatedResponse, AppsBetaGroupsGetToManyRelatedResponse, AppsBuildsGetToManyRelatedResponse, AppsCiProductGetToOneRelatedResponse, AppsCustomerReviewsGetToManyRelatedResponse, AppsReviewSubmissionsGetToManyRelatedResponse, BetaAppReviewSubmissionsBuildGetToOneRelatedResponse, BetaBuildLocalizationsBuildGetToOneRelatedResponse, BetaGroupsBuildsGetToManyRelatedResponse, BetaTestersBetaGroupsGetToManyRelatedResponse, BetaTestersBuildsGetToManyRelatedResponse, BuildBetaDetailsBuildGetToOneRelatedResponse, BuildBundlesAppClipDomainCacheStatusGetToOneRelatedResponse, BuildBundlesAppClipDomainDebugStatusGetToOneRelatedResponse, BuildsAppEncryptionDeclarationGetToOneRelatedResponse, BuildsAppStoreVersionGetToOneRelatedResponse, BuildsBetaAppReviewSubmissionGetToOneRelatedResponse, BuildsBuildBetaDetailGetToOneRelatedResponse, BundleIdsProfilesGetToManyRelatedResponse, CiBuildActionsBuildRunGetToOneRelatedResponse, CiBuildRunsActionsGetToManyRelatedResponse, CiBuildRunsBuildsGetToManyRelatedResponse, CiProductsAdditionalRepositoriesGetToManyRelatedResponse, CiProductsBuildRunsGetToManyRelatedResponse, CiProductsPrimaryRepositoriesGetToManyRelatedResponse, CiProductsWorkflowsGetToManyRelatedResponse, CiWorkflowsBuildRunsGetToManyRelatedResponse, CiWorkflowsRepositoryGetToOneRelatedResponse, CustomerReviewsResponseGetToOneRelatedResponse, DiagnosticSignaturesLogsGetToManyRelatedResponse, GameCenterAppVersionsAppStoreVersionGetToOneRelatedResponse, GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedResponse, GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedResponse, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedResponse, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedResponse, GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedResponse, InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedResponse, InAppPurchasePriceSchedulesManualPricesGetToManyRelatedResponse, InAppPurchasesV2ContentGetToOneRelatedResponse, PreReleaseVersionsBuildsGetToManyRelatedResponse, ProfilesCertificatesGetToManyRelatedResponse, ProfilesDevicesGetToManyRelatedResponse, ScmProvidersRepositoriesGetToManyRelatedResponse, ScmRepositoriesGitReferencesGetToManyRelatedResponse, ScmRepositoriesPullRequestsGetToManyRelatedResponse, SubscriptionOfferCodesCustomCodesGetToManyRelatedResponse, SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedResponse, SubscriptionsIntroductoryOffersGetToManyRelatedResponse, SubscriptionsPricesGetToManyRelatedResponse, SubscriptionsWinBackOffersGetToManyRelatedResponse, AppsBetaTesterUsagesGetMetricsResponse, BetaGroupsBetaTesterUsagesGetMetricsResponse, BetaTestersBetaTesterUsagesGetMetricsResponse, BuildsBetaBuildUsagesGetMetricsResponse, GameCenterDetailsClassicMatchmakingRequestsGetMetricsResponse, GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsResponse, GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsResponse, GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsResponse, GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsResponse, GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsResponse, GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsResponse, GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsResponse, GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsResponse, GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsResponse } from './types.gen';

const alternativeDistributionDomainSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.createdDate) {
            data.attributes.createdDate = new Date(data.attributes.createdDate);
        }
        return data.attributes;
    }
    return data;
};

const alternativeDistributionDomainsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return alternativeDistributionDomainSchemaResponseTransformer(item);
    });
    return data;
};

export const alternativeDistributionDomainsGetCollectionResponseTransformer = async (data: any): Promise<AlternativeDistributionDomainsGetCollectionResponse> => {
    data = alternativeDistributionDomainsResponseSchemaResponseTransformer(data);
    return data;
};

const alternativeDistributionDomainResponseSchemaResponseTransformer = (data: any) => {
    data.data = alternativeDistributionDomainSchemaResponseTransformer(data.data);
    return data;
};

export const alternativeDistributionDomainsCreateInstanceResponseTransformer = async (data: any): Promise<AlternativeDistributionDomainsCreateInstanceResponse> => {
    data = alternativeDistributionDomainResponseSchemaResponseTransformer(data);
    return data;
};

export const alternativeDistributionDomainsGetInstanceResponseTransformer = async (data: any): Promise<AlternativeDistributionDomainsGetInstanceResponse> => {
    data = alternativeDistributionDomainResponseSchemaResponseTransformer(data);
    return data;
};

const alternativeDistributionPackageDeltaSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.urlExpirationDate) {
            data.attributes.urlExpirationDate = new Date(data.attributes.urlExpirationDate);
        }
        return data.attributes;
    }
    return data;
};

const alternativeDistributionPackageDeltaResponseSchemaResponseTransformer = (data: any) => {
    data.data = alternativeDistributionPackageDeltaSchemaResponseTransformer(data.data);
    return data;
};

export const alternativeDistributionPackageDeltasGetInstanceResponseTransformer = async (data: any): Promise<AlternativeDistributionPackageDeltasGetInstanceResponse> => {
    data = alternativeDistributionPackageDeltaResponseSchemaResponseTransformer(data);
    return data;
};

const alternativeDistributionPackageVariantSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.urlExpirationDate) {
            data.attributes.urlExpirationDate = new Date(data.attributes.urlExpirationDate);
        }
        return data.attributes;
    }
    return data;
};

const alternativeDistributionPackageVariantResponseSchemaResponseTransformer = (data: any) => {
    data.data = alternativeDistributionPackageVariantSchemaResponseTransformer(data.data);
    return data;
};

export const alternativeDistributionPackageVariantsGetInstanceResponseTransformer = async (data: any): Promise<AlternativeDistributionPackageVariantsGetInstanceResponse> => {
    data = alternativeDistributionPackageVariantResponseSchemaResponseTransformer(data);
    return data;
};

const alternativeDistributionPackageVersionSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.urlExpirationDate) {
            data.attributes.urlExpirationDate = new Date(data.attributes.urlExpirationDate);
        }
        return data.attributes;
    }
    return data;
};

const alternativeDistributionPackageVersionResponseSchemaResponseTransformer = (data: any) => {
    data.data = alternativeDistributionPackageVersionSchemaResponseTransformer(data.data);
    return data;
};

export const alternativeDistributionPackageVersionsGetInstanceResponseTransformer = async (data: any): Promise<AlternativeDistributionPackageVersionsGetInstanceResponse> => {
    data = alternativeDistributionPackageVersionResponseSchemaResponseTransformer(data);
    return data;
};

const alternativeDistributionPackageResponseSchemaResponseTransformer = (data: any) => {
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return alternativeDistributionPackageVersionSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const alternativeDistributionPackagesCreateInstanceResponseTransformer = async (data: any): Promise<AlternativeDistributionPackagesCreateInstanceResponse> => {
    data = alternativeDistributionPackageResponseSchemaResponseTransformer(data);
    return data;
};

export const alternativeDistributionPackagesGetInstanceResponseTransformer = async (data: any): Promise<AlternativeDistributionPackagesGetInstanceResponse> => {
    data = alternativeDistributionPackageResponseSchemaResponseTransformer(data);
    return data;
};

const analyticsReportInstanceSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.processingDate) {
            data.attributes.processingDate = new Date(data.attributes.processingDate);
        }
        return data.attributes;
    }
    return data;
};

const analyticsReportInstanceResponseSchemaResponseTransformer = (data: any) => {
    data.data = analyticsReportInstanceSchemaResponseTransformer(data.data);
    return data;
};

export const analyticsReportInstancesGetInstanceResponseTransformer = async (data: any): Promise<AnalyticsReportInstancesGetInstanceResponse> => {
    data = analyticsReportInstanceResponseSchemaResponseTransformer(data);
    return data;
};

const territoryAvailabilitySchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.releaseDate) {
            data.attributes.releaseDate = new Date(data.attributes.releaseDate);
        }
        if (data.attributes.preOrderPublishDate) {
            data.attributes.preOrderPublishDate = new Date(data.attributes.preOrderPublishDate);
        }
        return data.attributes;
    }
    return data;
};

const appAvailabilityV2ResponseSchemaResponseTransformer = (data: any) => {
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return territoryAvailabilitySchemaResponseTransformer(item);
        });
    }
    return data;
};

export const appAvailabilitiesV2CreateInstanceResponseTransformer = async (data: any): Promise<AppAvailabilitiesV2CreateInstanceResponse> => {
    data = appAvailabilityV2ResponseSchemaResponseTransformer(data);
    return data;
};

export const appAvailabilitiesV2GetInstanceResponseTransformer = async (data: any): Promise<AppAvailabilitiesV2GetInstanceResponse> => {
    data = appAvailabilityV2ResponseSchemaResponseTransformer(data);
    return data;
};

const appEncryptionDeclarationSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.createdDate) {
            data.attributes.createdDate = new Date(data.attributes.createdDate);
        }
        if (data.attributes.uploadedDate) {
            data.attributes.uploadedDate = new Date(data.attributes.uploadedDate);
        }
        return data.attributes;
    }
    return data;
};

const appEncryptionDeclarationsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return appEncryptionDeclarationSchemaResponseTransformer(item);
    });
    return data;
};

export const appEncryptionDeclarationsGetCollectionResponseTransformer = async (data: any): Promise<AppEncryptionDeclarationsGetCollectionResponse> => {
    data = appEncryptionDeclarationsResponseSchemaResponseTransformer(data);
    return data;
};

const appEncryptionDeclarationResponseSchemaResponseTransformer = (data: any) => {
    data.data = appEncryptionDeclarationSchemaResponseTransformer(data.data);
    return data;
};

export const appEncryptionDeclarationsCreateInstanceResponseTransformer = async (data: any): Promise<AppEncryptionDeclarationsCreateInstanceResponse> => {
    data = appEncryptionDeclarationResponseSchemaResponseTransformer(data);
    return data;
};

export const appEncryptionDeclarationsGetInstanceResponseTransformer = async (data: any): Promise<AppEncryptionDeclarationsGetInstanceResponse> => {
    data = appEncryptionDeclarationResponseSchemaResponseTransformer(data);
    return data;
};

const appEventSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.territorySchedules) {
            data.attributes.territorySchedules = data.attributes.territorySchedules.map((item: any) => {
                if (item.publishStart) {
                    item.publishStart = new Date(item.publishStart);
                }
                if (item.eventStart) {
                    item.eventStart = new Date(item.eventStart);
                }
                if (item.eventEnd) {
                    item.eventEnd = new Date(item.eventEnd);
                }
                return item;
            });
        }
        if (data.attributes.archivedTerritorySchedules) {
            data.attributes.archivedTerritorySchedules = data.attributes.archivedTerritorySchedules.map((item: any) => {
                if (item.publishStart) {
                    item.publishStart = new Date(item.publishStart);
                }
                if (item.eventStart) {
                    item.eventStart = new Date(item.eventStart);
                }
                if (item.eventEnd) {
                    item.eventEnd = new Date(item.eventEnd);
                }
                return item;
            });
        }
        return data.attributes;
    }
    return data;
};

const appEventResponseSchemaResponseTransformer = (data: any) => {
    data.data = appEventSchemaResponseTransformer(data.data);
    return data;
};

export const appEventsCreateInstanceResponseTransformer = async (data: any): Promise<AppEventsCreateInstanceResponse> => {
    data = appEventResponseSchemaResponseTransformer(data);
    return data;
};

export const appEventsGetInstanceResponseTransformer = async (data: any): Promise<AppEventsGetInstanceResponse> => {
    data = appEventResponseSchemaResponseTransformer(data);
    return data;
};

export const appEventsUpdateInstanceResponseTransformer = async (data: any): Promise<AppEventsUpdateInstanceResponse> => {
    data = appEventResponseSchemaResponseTransformer(data);
    return data;
};

const appStoreVersionExperimentTreatmentSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.promotedDate) {
            data.attributes.promotedDate = new Date(data.attributes.promotedDate);
        }
        return data.attributes;
    }
    return data;
};

const appStoreVersionExperimentTreatmentResponseSchemaResponseTransformer = (data: any) => {
    data.data = appStoreVersionExperimentTreatmentSchemaResponseTransformer(data.data);
    return data;
};

export const appStoreVersionExperimentTreatmentsCreateInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionExperimentTreatmentsCreateInstanceResponse> => {
    data = appStoreVersionExperimentTreatmentResponseSchemaResponseTransformer(data);
    return data;
};

export const appStoreVersionExperimentTreatmentsGetInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionExperimentTreatmentsGetInstanceResponse> => {
    data = appStoreVersionExperimentTreatmentResponseSchemaResponseTransformer(data);
    return data;
};

export const appStoreVersionExperimentTreatmentsUpdateInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionExperimentTreatmentsUpdateInstanceResponse> => {
    data = appStoreVersionExperimentTreatmentResponseSchemaResponseTransformer(data);
    return data;
};

const appStoreVersionExperimentV2SchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.startDate) {
            data.attributes.startDate = new Date(data.attributes.startDate);
        }
        if (data.attributes.endDate) {
            data.attributes.endDate = new Date(data.attributes.endDate);
        }
        return data.attributes;
    }
    return data;
};

const appStoreVersionExperimentV2ResponseSchemaResponseTransformer = (data: any) => {
    data.data = appStoreVersionExperimentV2SchemaResponseTransformer(data.data);
    return data;
};

export const appStoreVersionExperimentsV2CreateInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionExperimentsV2CreateInstanceResponse> => {
    data = appStoreVersionExperimentV2ResponseSchemaResponseTransformer(data);
    return data;
};

export const appStoreVersionExperimentsV2GetInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionExperimentsV2GetInstanceResponse> => {
    data = appStoreVersionExperimentV2ResponseSchemaResponseTransformer(data);
    return data;
};

export const appStoreVersionExperimentsV2UpdateInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionExperimentsV2UpdateInstanceResponse> => {
    data = appStoreVersionExperimentV2ResponseSchemaResponseTransformer(data);
    return data;
};

const appStoreVersionExperimentSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.startDate) {
            data.attributes.startDate = new Date(data.attributes.startDate);
        }
        if (data.attributes.endDate) {
            data.attributes.endDate = new Date(data.attributes.endDate);
        }
        return data.attributes;
    }
    return data;
};

const appStoreVersionExperimentResponseSchemaResponseTransformer = (data: any) => {
    data.data = appStoreVersionExperimentSchemaResponseTransformer(data.data);
    return data;
};

export const appStoreVersionExperimentsCreateInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionExperimentsCreateInstanceResponse> => {
    data = appStoreVersionExperimentResponseSchemaResponseTransformer(data);
    return data;
};

export const appStoreVersionExperimentsGetInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionExperimentsGetInstanceResponse> => {
    data = appStoreVersionExperimentResponseSchemaResponseTransformer(data);
    return data;
};

export const appStoreVersionExperimentsUpdateInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionExperimentsUpdateInstanceResponse> => {
    data = appStoreVersionExperimentResponseSchemaResponseTransformer(data);
    return data;
};

const appStoreVersionPhasedReleaseSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.startDate) {
            data.attributes.startDate = new Date(data.attributes.startDate);
        }
        return data.attributes;
    }
    return data;
};

const appStoreVersionPhasedReleaseResponseSchemaResponseTransformer = (data: any) => {
    data.data = appStoreVersionPhasedReleaseSchemaResponseTransformer(data.data);
    return data;
};

export const appStoreVersionPhasedReleasesCreateInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionPhasedReleasesCreateInstanceResponse> => {
    data = appStoreVersionPhasedReleaseResponseSchemaResponseTransformer(data);
    return data;
};

export const appStoreVersionPhasedReleasesUpdateInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionPhasedReleasesUpdateInstanceResponse> => {
    data = appStoreVersionPhasedReleaseResponseSchemaResponseTransformer(data);
    return data;
};

const appStoreVersionSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.earliestReleaseDate) {
            data.attributes.earliestReleaseDate = new Date(data.attributes.earliestReleaseDate);
        }
        if (data.attributes.createdDate) {
            data.attributes.createdDate = new Date(data.attributes.createdDate);
        }
        return data.attributes;
    }
    return data;
};

const appStoreVersionSubmissionResponseSchemaResponseTransformer = (data: any) => {
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return appStoreVersionSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const appStoreVersionSubmissionsCreateInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionSubmissionsCreateInstanceResponse> => {
    data = appStoreVersionSubmissionResponseSchemaResponseTransformer(data);
    return data;
};

const appStoreVersionResponseSchemaResponseTransformer = (data: any) => {
    data.data = appStoreVersionSchemaResponseTransformer(data.data);
    return data;
};

export const appStoreVersionsCreateInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionsCreateInstanceResponse> => {
    data = appStoreVersionResponseSchemaResponseTransformer(data);
    return data;
};

export const appStoreVersionsGetInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionsGetInstanceResponse> => {
    data = appStoreVersionResponseSchemaResponseTransformer(data);
    return data;
};

export const appStoreVersionsUpdateInstanceResponseTransformer = async (data: any): Promise<AppStoreVersionsUpdateInstanceResponse> => {
    data = appStoreVersionResponseSchemaResponseTransformer(data);
    return data;
};

const betaAppReviewSubmissionSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.submittedDate) {
            data.attributes.submittedDate = new Date(data.attributes.submittedDate);
        }
        return data.attributes;
    }
    return data;
};

const buildSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.uploadedDate) {
            data.attributes.uploadedDate = new Date(data.attributes.uploadedDate);
        }
        if (data.attributes.expirationDate) {
            data.attributes.expirationDate = new Date(data.attributes.expirationDate);
        }
        return data.attributes;
    }
    return data;
};

const betaAppReviewSubmissionsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return betaAppReviewSubmissionSchemaResponseTransformer(item);
    });
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return buildSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const betaAppReviewSubmissionsGetCollectionResponseTransformer = async (data: any): Promise<BetaAppReviewSubmissionsGetCollectionResponse> => {
    data = betaAppReviewSubmissionsResponseSchemaResponseTransformer(data);
    return data;
};

const betaAppReviewSubmissionResponseSchemaResponseTransformer = (data: any) => {
    data.data = betaAppReviewSubmissionSchemaResponseTransformer(data.data);
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return buildSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const betaAppReviewSubmissionsCreateInstanceResponseTransformer = async (data: any): Promise<BetaAppReviewSubmissionsCreateInstanceResponse> => {
    data = betaAppReviewSubmissionResponseSchemaResponseTransformer(data);
    return data;
};

export const betaAppReviewSubmissionsGetInstanceResponseTransformer = async (data: any): Promise<BetaAppReviewSubmissionsGetInstanceResponse> => {
    data = betaAppReviewSubmissionResponseSchemaResponseTransformer(data);
    return data;
};

const betaBuildLocalizationsResponseSchemaResponseTransformer = (data: any) => {
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return buildSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const betaBuildLocalizationsGetCollectionResponseTransformer = async (data: any): Promise<BetaBuildLocalizationsGetCollectionResponse> => {
    data = betaBuildLocalizationsResponseSchemaResponseTransformer(data);
    return data;
};

const betaBuildLocalizationResponseSchemaResponseTransformer = (data: any) => {
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return buildSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const betaBuildLocalizationsCreateInstanceResponseTransformer = async (data: any): Promise<BetaBuildLocalizationsCreateInstanceResponse> => {
    data = betaBuildLocalizationResponseSchemaResponseTransformer(data);
    return data;
};

export const betaBuildLocalizationsGetInstanceResponseTransformer = async (data: any): Promise<BetaBuildLocalizationsGetInstanceResponse> => {
    data = betaBuildLocalizationResponseSchemaResponseTransformer(data);
    return data;
};

export const betaBuildLocalizationsUpdateInstanceResponseTransformer = async (data: any): Promise<BetaBuildLocalizationsUpdateInstanceResponse> => {
    data = betaBuildLocalizationResponseSchemaResponseTransformer(data);
    return data;
};

const betaGroupSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.createdDate) {
            data.attributes.createdDate = new Date(data.attributes.createdDate);
        }
        return data.attributes;
    }
    return data;
};

const betaGroupsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return betaGroupSchemaResponseTransformer(item);
    });
    return data;
};

export const betaGroupsGetCollectionResponseTransformer = async (data: any): Promise<BetaGroupsGetCollectionResponse> => {
    data = betaGroupsResponseSchemaResponseTransformer(data);
    return data;
};

const betaGroupResponseSchemaResponseTransformer = (data: any) => {
    data.data = betaGroupSchemaResponseTransformer(data.data);
    return data;
};

export const betaGroupsCreateInstanceResponseTransformer = async (data: any): Promise<BetaGroupsCreateInstanceResponse> => {
    data = betaGroupResponseSchemaResponseTransformer(data);
    return data;
};

export const betaGroupsGetInstanceResponseTransformer = async (data: any): Promise<BetaGroupsGetInstanceResponse> => {
    data = betaGroupResponseSchemaResponseTransformer(data);
    return data;
};

export const betaGroupsUpdateInstanceResponseTransformer = async (data: any): Promise<BetaGroupsUpdateInstanceResponse> => {
    data = betaGroupResponseSchemaResponseTransformer(data);
    return data;
};

const buildBetaDetailsResponseSchemaResponseTransformer = (data: any) => {
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return buildSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const buildBetaDetailsGetCollectionResponseTransformer = async (data: any): Promise<BuildBetaDetailsGetCollectionResponse> => {
    data = buildBetaDetailsResponseSchemaResponseTransformer(data);
    return data;
};

const buildBetaDetailResponseSchemaResponseTransformer = (data: any) => {
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return buildSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const buildBetaDetailsGetInstanceResponseTransformer = async (data: any): Promise<BuildBetaDetailsGetInstanceResponse> => {
    data = buildBetaDetailResponseSchemaResponseTransformer(data);
    return data;
};

export const buildBetaDetailsUpdateInstanceResponseTransformer = async (data: any): Promise<BuildBetaDetailsUpdateInstanceResponse> => {
    data = buildBetaDetailResponseSchemaResponseTransformer(data);
    return data;
};

const buildsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return buildSchemaResponseTransformer(item);
    });
    return data;
};

export const buildsGetCollectionResponseTransformer = async (data: any): Promise<BuildsGetCollectionResponse> => {
    data = buildsResponseSchemaResponseTransformer(data);
    return data;
};

const buildResponseSchemaResponseTransformer = (data: any) => {
    data.data = buildSchemaResponseTransformer(data.data);
    return data;
};

export const buildsGetInstanceResponseTransformer = async (data: any): Promise<BuildsGetInstanceResponse> => {
    data = buildResponseSchemaResponseTransformer(data);
    return data;
};

export const buildsUpdateInstanceResponseTransformer = async (data: any): Promise<BuildsUpdateInstanceResponse> => {
    data = buildResponseSchemaResponseTransformer(data);
    return data;
};

const certificateSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.expirationDate) {
            data.attributes.expirationDate = new Date(data.attributes.expirationDate);
        }
        return data.attributes;
    }
    return data;
};

const certificatesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return certificateSchemaResponseTransformer(item);
    });
    return data;
};

export const certificatesGetCollectionResponseTransformer = async (data: any): Promise<CertificatesGetCollectionResponse> => {
    data = certificatesResponseSchemaResponseTransformer(data);
    return data;
};

const certificateResponseSchemaResponseTransformer = (data: any) => {
    data.data = certificateSchemaResponseTransformer(data.data);
    return data;
};

export const certificatesCreateInstanceResponseTransformer = async (data: any): Promise<CertificatesCreateInstanceResponse> => {
    data = certificateResponseSchemaResponseTransformer(data);
    return data;
};

export const certificatesGetInstanceResponseTransformer = async (data: any): Promise<CertificatesGetInstanceResponse> => {
    data = certificateResponseSchemaResponseTransformer(data);
    return data;
};

const ciBuildActionSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.startedDate) {
            data.attributes.startedDate = new Date(data.attributes.startedDate);
        }
        if (data.attributes.finishedDate) {
            data.attributes.finishedDate = new Date(data.attributes.finishedDate);
        }
        return data.attributes;
    }
    return data;
};

const ciBuildRunSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.createdDate) {
            data.attributes.createdDate = new Date(data.attributes.createdDate);
        }
        if (data.attributes.startedDate) {
            data.attributes.startedDate = new Date(data.attributes.startedDate);
        }
        if (data.attributes.finishedDate) {
            data.attributes.finishedDate = new Date(data.attributes.finishedDate);
        }
        return data.attributes;
    }
    return data;
};

const ciBuildActionResponseSchemaResponseTransformer = (data: any) => {
    data.data = ciBuildActionSchemaResponseTransformer(data.data);
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return ciBuildRunSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const ciBuildActionsGetInstanceResponseTransformer = async (data: any): Promise<CiBuildActionsGetInstanceResponse> => {
    data = ciBuildActionResponseSchemaResponseTransformer(data);
    return data;
};

const ciBuildRunResponseSchemaResponseTransformer = (data: any) => {
    data.data = ciBuildRunSchemaResponseTransformer(data.data);
    return data;
};

export const ciBuildRunsCreateInstanceResponseTransformer = async (data: any): Promise<CiBuildRunsCreateInstanceResponse> => {
    data = ciBuildRunResponseSchemaResponseTransformer(data);
    return data;
};

export const ciBuildRunsGetInstanceResponseTransformer = async (data: any): Promise<CiBuildRunsGetInstanceResponse> => {
    data = ciBuildRunResponseSchemaResponseTransformer(data);
    return data;
};

const ciProductSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.createdDate) {
            data.attributes.createdDate = new Date(data.attributes.createdDate);
        }
        return data.attributes;
    }
    return data;
};

const ciProductsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return ciProductSchemaResponseTransformer(item);
    });
    return data;
};

export const ciProductsGetCollectionResponseTransformer = async (data: any): Promise<CiProductsGetCollectionResponse> => {
    data = ciProductsResponseSchemaResponseTransformer(data);
    return data;
};

const ciProductResponseSchemaResponseTransformer = (data: any) => {
    data.data = ciProductSchemaResponseTransformer(data.data);
    return data;
};

export const ciProductsGetInstanceResponseTransformer = async (data: any): Promise<CiProductsGetInstanceResponse> => {
    data = ciProductResponseSchemaResponseTransformer(data);
    return data;
};

const ciWorkflowSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.lastModifiedDate) {
            data.attributes.lastModifiedDate = new Date(data.attributes.lastModifiedDate);
        }
        return data.attributes;
    }
    return data;
};

const ciWorkflowResponseSchemaResponseTransformer = (data: any) => {
    data.data = ciWorkflowSchemaResponseTransformer(data.data);
    return data;
};

export const ciWorkflowsCreateInstanceResponseTransformer = async (data: any): Promise<CiWorkflowsCreateInstanceResponse> => {
    data = ciWorkflowResponseSchemaResponseTransformer(data);
    return data;
};

export const ciWorkflowsGetInstanceResponseTransformer = async (data: any): Promise<CiWorkflowsGetInstanceResponse> => {
    data = ciWorkflowResponseSchemaResponseTransformer(data);
    return data;
};

export const ciWorkflowsUpdateInstanceResponseTransformer = async (data: any): Promise<CiWorkflowsUpdateInstanceResponse> => {
    data = ciWorkflowResponseSchemaResponseTransformer(data);
    return data;
};

const customerReviewResponseV1SchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.lastModifiedDate) {
            data.attributes.lastModifiedDate = new Date(data.attributes.lastModifiedDate);
        }
        return data.attributes;
    }
    return data;
};

const customerReviewSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.createdDate) {
            data.attributes.createdDate = new Date(data.attributes.createdDate);
        }
        return data.attributes;
    }
    return data;
};

const customerReviewResponseV1ResponseSchemaResponseTransformer = (data: any) => {
    data.data = customerReviewResponseV1SchemaResponseTransformer(data.data);
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return customerReviewSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const customerReviewResponsesCreateInstanceResponseTransformer = async (data: any): Promise<CustomerReviewResponsesCreateInstanceResponse> => {
    data = customerReviewResponseV1ResponseSchemaResponseTransformer(data);
    return data;
};

export const customerReviewResponsesGetInstanceResponseTransformer = async (data: any): Promise<CustomerReviewResponsesGetInstanceResponse> => {
    data = customerReviewResponseV1ResponseSchemaResponseTransformer(data);
    return data;
};

const customerReviewResponseSchemaResponseTransformer = (data: any) => {
    data.data = customerReviewSchemaResponseTransformer(data.data);
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return customerReviewResponseV1SchemaResponseTransformer(item);
        });
    }
    return data;
};

export const customerReviewsGetInstanceResponseTransformer = async (data: any): Promise<CustomerReviewsGetInstanceResponse> => {
    data = customerReviewResponseSchemaResponseTransformer(data);
    return data;
};

const deviceSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.addedDate) {
            data.attributes.addedDate = new Date(data.attributes.addedDate);
        }
        return data.attributes;
    }
    return data;
};

const devicesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return deviceSchemaResponseTransformer(item);
    });
    return data;
};

export const devicesGetCollectionResponseTransformer = async (data: any): Promise<DevicesGetCollectionResponse> => {
    data = devicesResponseSchemaResponseTransformer(data);
    return data;
};

const deviceResponseSchemaResponseTransformer = (data: any) => {
    data.data = deviceSchemaResponseTransformer(data.data);
    return data;
};

export const devicesCreateInstanceResponseTransformer = async (data: any): Promise<DevicesCreateInstanceResponse> => {
    data = deviceResponseSchemaResponseTransformer(data);
    return data;
};

export const devicesGetInstanceResponseTransformer = async (data: any): Promise<DevicesGetInstanceResponse> => {
    data = deviceResponseSchemaResponseTransformer(data);
    return data;
};

export const devicesUpdateInstanceResponseTransformer = async (data: any): Promise<DevicesUpdateInstanceResponse> => {
    data = deviceResponseSchemaResponseTransformer(data);
    return data;
};

const gameCenterLeaderboardEntrySubmissionSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.submittedDate) {
            data.attributes.submittedDate = new Date(data.attributes.submittedDate);
        }
        return data.attributes;
    }
    return data;
};

const gameCenterLeaderboardEntrySubmissionResponseSchemaResponseTransformer = (data: any) => {
    data.data = gameCenterLeaderboardEntrySubmissionSchemaResponseTransformer(data.data);
    return data;
};

export const gameCenterLeaderboardEntrySubmissionsCreateInstanceResponseTransformer = async (data: any): Promise<GameCenterLeaderboardEntrySubmissionsCreateInstanceResponse> => {
    data = gameCenterLeaderboardEntrySubmissionResponseSchemaResponseTransformer(data);
    return data;
};

const gameCenterLeaderboardSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.recurrenceStartDate) {
            data.attributes.recurrenceStartDate = new Date(data.attributes.recurrenceStartDate);
        }
        return data.attributes;
    }
    return data;
};

const gameCenterLeaderboardResponseSchemaResponseTransformer = (data: any) => {
    data.data = gameCenterLeaderboardSchemaResponseTransformer(data.data);
    return data;
};

export const gameCenterLeaderboardsCreateInstanceResponseTransformer = async (data: any): Promise<GameCenterLeaderboardsCreateInstanceResponse> => {
    data = gameCenterLeaderboardResponseSchemaResponseTransformer(data);
    return data;
};

export const gameCenterLeaderboardsGetInstanceResponseTransformer = async (data: any): Promise<GameCenterLeaderboardsGetInstanceResponse> => {
    data = gameCenterLeaderboardResponseSchemaResponseTransformer(data);
    return data;
};

export const gameCenterLeaderboardsUpdateInstanceResponseTransformer = async (data: any): Promise<GameCenterLeaderboardsUpdateInstanceResponse> => {
    data = gameCenterLeaderboardResponseSchemaResponseTransformer(data);
    return data;
};

const gameCenterPlayerAchievementSubmissionSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.submittedDate) {
            data.attributes.submittedDate = new Date(data.attributes.submittedDate);
        }
        return data.attributes;
    }
    return data;
};

const gameCenterPlayerAchievementSubmissionResponseSchemaResponseTransformer = (data: any) => {
    data.data = gameCenterPlayerAchievementSubmissionSchemaResponseTransformer(data.data);
    return data;
};

export const gameCenterPlayerAchievementSubmissionsCreateInstanceResponseTransformer = async (data: any): Promise<GameCenterPlayerAchievementSubmissionsCreateInstanceResponse> => {
    data = gameCenterPlayerAchievementSubmissionResponseSchemaResponseTransformer(data);
    return data;
};

const inAppPurchaseContentSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.lastModifiedDate) {
            data.attributes.lastModifiedDate = new Date(data.attributes.lastModifiedDate);
        }
        return data.attributes;
    }
    return data;
};

const inAppPurchaseContentResponseSchemaResponseTransformer = (data: any) => {
    data.data = inAppPurchaseContentSchemaResponseTransformer(data.data);
    return data;
};

export const inAppPurchaseContentsGetInstanceResponseTransformer = async (data: any): Promise<InAppPurchaseContentsGetInstanceResponse> => {
    data = inAppPurchaseContentResponseSchemaResponseTransformer(data);
    return data;
};

const marketplaceDomainSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.createdDate) {
            data.attributes.createdDate = new Date(data.attributes.createdDate);
        }
        return data.attributes;
    }
    return data;
};

const marketplaceDomainsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return marketplaceDomainSchemaResponseTransformer(item);
    });
    return data;
};

export const marketplaceDomainsGetCollectionResponseTransformer = async (data: any): Promise<MarketplaceDomainsGetCollectionResponse> => {
    data = marketplaceDomainsResponseSchemaResponseTransformer(data);
    return data;
};

const marketplaceDomainResponseSchemaResponseTransformer = (data: any) => {
    data.data = marketplaceDomainSchemaResponseTransformer(data.data);
    return data;
};

export const marketplaceDomainsCreateInstanceResponseTransformer = async (data: any): Promise<MarketplaceDomainsCreateInstanceResponse> => {
    data = marketplaceDomainResponseSchemaResponseTransformer(data);
    return data;
};

export const marketplaceDomainsGetInstanceResponseTransformer = async (data: any): Promise<MarketplaceDomainsGetInstanceResponse> => {
    data = marketplaceDomainResponseSchemaResponseTransformer(data);
    return data;
};

const profileSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.createdDate) {
            data.attributes.createdDate = new Date(data.attributes.createdDate);
        }
        if (data.attributes.expirationDate) {
            data.attributes.expirationDate = new Date(data.attributes.expirationDate);
        }
        return data.attributes;
    }
    return data;
};

const profilesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return profileSchemaResponseTransformer(item);
    });
    return data;
};

export const profilesGetCollectionResponseTransformer = async (data: any): Promise<ProfilesGetCollectionResponse> => {
    data = profilesResponseSchemaResponseTransformer(data);
    return data;
};

const profileResponseSchemaResponseTransformer = (data: any) => {
    data.data = profileSchemaResponseTransformer(data.data);
    return data;
};

export const profilesCreateInstanceResponseTransformer = async (data: any): Promise<ProfilesCreateInstanceResponse> => {
    data = profileResponseSchemaResponseTransformer(data);
    return data;
};

export const profilesGetInstanceResponseTransformer = async (data: any): Promise<ProfilesGetInstanceResponse> => {
    data = profileResponseSchemaResponseTransformer(data);
    return data;
};

const reviewSubmissionSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.submittedDate) {
            data.attributes.submittedDate = new Date(data.attributes.submittedDate);
        }
        return data.attributes;
    }
    return data;
};

const reviewSubmissionsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return reviewSubmissionSchemaResponseTransformer(item);
    });
    return data;
};

export const reviewSubmissionsGetCollectionResponseTransformer = async (data: any): Promise<ReviewSubmissionsGetCollectionResponse> => {
    data = reviewSubmissionsResponseSchemaResponseTransformer(data);
    return data;
};

const reviewSubmissionResponseSchemaResponseTransformer = (data: any) => {
    data.data = reviewSubmissionSchemaResponseTransformer(data.data);
    return data;
};

export const reviewSubmissionsCreateInstanceResponseTransformer = async (data: any): Promise<ReviewSubmissionsCreateInstanceResponse> => {
    data = reviewSubmissionResponseSchemaResponseTransformer(data);
    return data;
};

export const reviewSubmissionsGetInstanceResponseTransformer = async (data: any): Promise<ReviewSubmissionsGetInstanceResponse> => {
    data = reviewSubmissionResponseSchemaResponseTransformer(data);
    return data;
};

export const reviewSubmissionsUpdateInstanceResponseTransformer = async (data: any): Promise<ReviewSubmissionsUpdateInstanceResponse> => {
    data = reviewSubmissionResponseSchemaResponseTransformer(data);
    return data;
};

const routingAppCoverageResponseSchemaResponseTransformer = (data: any) => {
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return appStoreVersionSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const routingAppCoveragesCreateInstanceResponseTransformer = async (data: any): Promise<RoutingAppCoveragesCreateInstanceResponse> => {
    data = routingAppCoverageResponseSchemaResponseTransformer(data);
    return data;
};

export const routingAppCoveragesGetInstanceResponseTransformer = async (data: any): Promise<RoutingAppCoveragesGetInstanceResponse> => {
    data = routingAppCoverageResponseSchemaResponseTransformer(data);
    return data;
};

export const routingAppCoveragesUpdateInstanceResponseTransformer = async (data: any): Promise<RoutingAppCoveragesUpdateInstanceResponse> => {
    data = routingAppCoverageResponseSchemaResponseTransformer(data);
    return data;
};

const scmRepositorySchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.lastAccessedDate) {
            data.attributes.lastAccessedDate = new Date(data.attributes.lastAccessedDate);
        }
        return data.attributes;
    }
    return data;
};

const scmGitReferenceResponseSchemaResponseTransformer = (data: any) => {
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return scmRepositorySchemaResponseTransformer(item);
        });
    }
    return data;
};

export const scmGitReferencesGetInstanceResponseTransformer = async (data: any): Promise<ScmGitReferencesGetInstanceResponse> => {
    data = scmGitReferenceResponseSchemaResponseTransformer(data);
    return data;
};

const scmPullRequestResponseSchemaResponseTransformer = (data: any) => {
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return scmRepositorySchemaResponseTransformer(item);
        });
    }
    return data;
};

export const scmPullRequestsGetInstanceResponseTransformer = async (data: any): Promise<ScmPullRequestsGetInstanceResponse> => {
    data = scmPullRequestResponseSchemaResponseTransformer(data);
    return data;
};

const scmRepositoriesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return scmRepositorySchemaResponseTransformer(item);
    });
    return data;
};

export const scmRepositoriesGetCollectionResponseTransformer = async (data: any): Promise<ScmRepositoriesGetCollectionResponse> => {
    data = scmRepositoriesResponseSchemaResponseTransformer(data);
    return data;
};

const scmRepositoryResponseSchemaResponseTransformer = (data: any) => {
    data.data = scmRepositorySchemaResponseTransformer(data.data);
    return data;
};

export const scmRepositoriesGetInstanceResponseTransformer = async (data: any): Promise<ScmRepositoriesGetInstanceResponse> => {
    data = scmRepositoryResponseSchemaResponseTransformer(data);
    return data;
};

const subscriptionIntroductoryOfferSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.startDate) {
            data.attributes.startDate = new Date(data.attributes.startDate);
        }
        if (data.attributes.endDate) {
            data.attributes.endDate = new Date(data.attributes.endDate);
        }
        return data.attributes;
    }
    return data;
};

const subscriptionIntroductoryOfferResponseSchemaResponseTransformer = (data: any) => {
    data.data = subscriptionIntroductoryOfferSchemaResponseTransformer(data.data);
    return data;
};

export const subscriptionIntroductoryOffersCreateInstanceResponseTransformer = async (data: any): Promise<SubscriptionIntroductoryOffersCreateInstanceResponse> => {
    data = subscriptionIntroductoryOfferResponseSchemaResponseTransformer(data);
    return data;
};

export const subscriptionIntroductoryOffersUpdateInstanceResponseTransformer = async (data: any): Promise<SubscriptionIntroductoryOffersUpdateInstanceResponse> => {
    data = subscriptionIntroductoryOfferResponseSchemaResponseTransformer(data);
    return data;
};

const subscriptionOfferCodeCustomCodeSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.createdDate) {
            data.attributes.createdDate = new Date(data.attributes.createdDate);
        }
        if (data.attributes.expirationDate) {
            data.attributes.expirationDate = new Date(data.attributes.expirationDate);
        }
        return data.attributes;
    }
    return data;
};

const subscriptionOfferCodeCustomCodeResponseSchemaResponseTransformer = (data: any) => {
    data.data = subscriptionOfferCodeCustomCodeSchemaResponseTransformer(data.data);
    return data;
};

export const subscriptionOfferCodeCustomCodesCreateInstanceResponseTransformer = async (data: any): Promise<SubscriptionOfferCodeCustomCodesCreateInstanceResponse> => {
    data = subscriptionOfferCodeCustomCodeResponseSchemaResponseTransformer(data);
    return data;
};

export const subscriptionOfferCodeCustomCodesGetInstanceResponseTransformer = async (data: any): Promise<SubscriptionOfferCodeCustomCodesGetInstanceResponse> => {
    data = subscriptionOfferCodeCustomCodeResponseSchemaResponseTransformer(data);
    return data;
};

export const subscriptionOfferCodeCustomCodesUpdateInstanceResponseTransformer = async (data: any): Promise<SubscriptionOfferCodeCustomCodesUpdateInstanceResponse> => {
    data = subscriptionOfferCodeCustomCodeResponseSchemaResponseTransformer(data);
    return data;
};

const subscriptionOfferCodeOneTimeUseCodeSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.createdDate) {
            data.attributes.createdDate = new Date(data.attributes.createdDate);
        }
        if (data.attributes.expirationDate) {
            data.attributes.expirationDate = new Date(data.attributes.expirationDate);
        }
        return data.attributes;
    }
    return data;
};

const subscriptionOfferCodeOneTimeUseCodeResponseSchemaResponseTransformer = (data: any) => {
    data.data = subscriptionOfferCodeOneTimeUseCodeSchemaResponseTransformer(data.data);
    return data;
};

export const subscriptionOfferCodeOneTimeUseCodesCreateInstanceResponseTransformer = async (data: any): Promise<SubscriptionOfferCodeOneTimeUseCodesCreateInstanceResponse> => {
    data = subscriptionOfferCodeOneTimeUseCodeResponseSchemaResponseTransformer(data);
    return data;
};

export const subscriptionOfferCodeOneTimeUseCodesGetInstanceResponseTransformer = async (data: any): Promise<SubscriptionOfferCodeOneTimeUseCodesGetInstanceResponse> => {
    data = subscriptionOfferCodeOneTimeUseCodeResponseSchemaResponseTransformer(data);
    return data;
};

export const subscriptionOfferCodeOneTimeUseCodesUpdateInstanceResponseTransformer = async (data: any): Promise<SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceResponse> => {
    data = subscriptionOfferCodeOneTimeUseCodeResponseSchemaResponseTransformer(data);
    return data;
};

const subscriptionPriceSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.startDate) {
            data.attributes.startDate = new Date(data.attributes.startDate);
        }
        return data.attributes;
    }
    return data;
};

const subscriptionPriceResponseSchemaResponseTransformer = (data: any) => {
    data.data = subscriptionPriceSchemaResponseTransformer(data.data);
    return data;
};

export const subscriptionPricesCreateInstanceResponseTransformer = async (data: any): Promise<SubscriptionPricesCreateInstanceResponse> => {
    data = subscriptionPriceResponseSchemaResponseTransformer(data);
    return data;
};

const territoryAvailabilityResponseSchemaResponseTransformer = (data: any) => {
    data.data = territoryAvailabilitySchemaResponseTransformer(data.data);
    return data;
};

export const territoryAvailabilitiesUpdateInstanceResponseTransformer = async (data: any): Promise<TerritoryAvailabilitiesUpdateInstanceResponse> => {
    data = territoryAvailabilityResponseSchemaResponseTransformer(data);
    return data;
};

const userInvitationSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.expirationDate) {
            data.attributes.expirationDate = new Date(data.attributes.expirationDate);
        }
        return data.attributes;
    }
    return data;
};

const userInvitationsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return userInvitationSchemaResponseTransformer(item);
    });
    return data;
};

export const userInvitationsGetCollectionResponseTransformer = async (data: any): Promise<UserInvitationsGetCollectionResponse> => {
    data = userInvitationsResponseSchemaResponseTransformer(data);
    return data;
};

const userInvitationResponseSchemaResponseTransformer = (data: any) => {
    data.data = userInvitationSchemaResponseTransformer(data.data);
    return data;
};

export const userInvitationsCreateInstanceResponseTransformer = async (data: any): Promise<UserInvitationsCreateInstanceResponse> => {
    data = userInvitationResponseSchemaResponseTransformer(data);
    return data;
};

export const userInvitationsGetInstanceResponseTransformer = async (data: any): Promise<UserInvitationsGetInstanceResponse> => {
    data = userInvitationResponseSchemaResponseTransformer(data);
    return data;
};

const winBackOfferSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.startDate) {
            data.attributes.startDate = new Date(data.attributes.startDate);
        }
        if (data.attributes.endDate) {
            data.attributes.endDate = new Date(data.attributes.endDate);
        }
        return data.attributes;
    }
    return data;
};

const winBackOfferResponseSchemaResponseTransformer = (data: any) => {
    data.data = winBackOfferSchemaResponseTransformer(data.data);
    return data;
};

export const winBackOffersCreateInstanceResponseTransformer = async (data: any): Promise<WinBackOffersCreateInstanceResponse> => {
    data = winBackOfferResponseSchemaResponseTransformer(data);
    return data;
};

export const winBackOffersGetInstanceResponseTransformer = async (data: any): Promise<WinBackOffersGetInstanceResponse> => {
    data = winBackOfferResponseSchemaResponseTransformer(data);
    return data;
};

export const winBackOffersUpdateInstanceResponseTransformer = async (data: any): Promise<WinBackOffersUpdateInstanceResponse> => {
    data = winBackOfferResponseSchemaResponseTransformer(data);
    return data;
};

const alternativeDistributionPackageDeltasResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return alternativeDistributionPackageDeltaSchemaResponseTransformer(item);
    });
    return data;
};

export const alternativeDistributionPackageVersionsDeltasGetToManyRelatedResponseTransformer = async (data: any): Promise<AlternativeDistributionPackageVersionsDeltasGetToManyRelatedResponse> => {
    data = alternativeDistributionPackageDeltasResponseSchemaResponseTransformer(data);
    return data;
};

const alternativeDistributionPackageVariantsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return alternativeDistributionPackageVariantSchemaResponseTransformer(item);
    });
    return data;
};

export const alternativeDistributionPackageVersionsVariantsGetToManyRelatedResponseTransformer = async (data: any): Promise<AlternativeDistributionPackageVersionsVariantsGetToManyRelatedResponse> => {
    data = alternativeDistributionPackageVariantsResponseSchemaResponseTransformer(data);
    return data;
};

const alternativeDistributionPackageVersionsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return alternativeDistributionPackageVersionSchemaResponseTransformer(item);
    });
    return data;
};

export const alternativeDistributionPackagesVersionsGetToManyRelatedResponseTransformer = async (data: any): Promise<AlternativeDistributionPackagesVersionsGetToManyRelatedResponse> => {
    data = alternativeDistributionPackageVersionsResponseSchemaResponseTransformer(data);
    return data;
};

const analyticsReportInstancesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return analyticsReportInstanceSchemaResponseTransformer(item);
    });
    return data;
};

export const analyticsReportsInstancesGetToManyRelatedResponseTransformer = async (data: any): Promise<AnalyticsReportsInstancesGetToManyRelatedResponse> => {
    data = analyticsReportInstancesResponseSchemaResponseTransformer(data);
    return data;
};

const territoryAvailabilitiesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return territoryAvailabilitySchemaResponseTransformer(item);
    });
    return data;
};

export const appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedResponseTransformer = async (data: any): Promise<AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedResponse> => {
    data = territoryAvailabilitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedResponseTransformer = async (data: any): Promise<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedResponse> => {
    data = appStoreVersionResponseSchemaResponseTransformer(data);
    return data;
};

const appPriceV2SchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.startDate) {
            data.attributes.startDate = new Date(data.attributes.startDate);
        }
        if (data.attributes.endDate) {
            data.attributes.endDate = new Date(data.attributes.endDate);
        }
        return data.attributes;
    }
    return data;
};

const appPricesV2ResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return appPriceV2SchemaResponseTransformer(item);
    });
    return data;
};

export const appPriceSchedulesAutomaticPricesGetToManyRelatedResponseTransformer = async (data: any): Promise<AppPriceSchedulesAutomaticPricesGetToManyRelatedResponse> => {
    data = appPricesV2ResponseSchemaResponseTransformer(data);
    return data;
};

export const appPriceSchedulesManualPricesGetToManyRelatedResponseTransformer = async (data: any): Promise<AppPriceSchedulesManualPricesGetToManyRelatedResponse> => {
    data = appPricesV2ResponseSchemaResponseTransformer(data);
    return data;
};

const appStoreVersionExperimentTreatmentsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return appStoreVersionExperimentTreatmentSchemaResponseTransformer(item);
    });
    return data;
};

export const appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedResponseTransformer = async (data: any): Promise<AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedResponse> => {
    data = appStoreVersionExperimentTreatmentsResponseSchemaResponseTransformer(data);
    return data;
};

export const appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedResponseTransformer = async (data: any): Promise<AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedResponse> => {
    data = appStoreVersionExperimentTreatmentsResponseSchemaResponseTransformer(data);
    return data;
};

export const appStoreVersionsAlternativeDistributionPackageGetToOneRelatedResponseTransformer = async (data: any): Promise<AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedResponse> => {
    data = alternativeDistributionPackageResponseSchemaResponseTransformer(data);
    return data;
};

const appStoreVersionExperimentsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return appStoreVersionExperimentSchemaResponseTransformer(item);
    });
    return data;
};

export const appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedResponseTransformer = async (data: any): Promise<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedResponse> => {
    data = appStoreVersionExperimentsResponseSchemaResponseTransformer(data);
    return data;
};

const appStoreVersionExperimentsV2ResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return appStoreVersionExperimentV2SchemaResponseTransformer(item);
    });
    return data;
};

export const appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedResponseTransformer = async (data: any): Promise<AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedResponse> => {
    data = appStoreVersionExperimentsV2ResponseSchemaResponseTransformer(data);
    return data;
};

const appStoreVersionPhasedReleaseWithoutIncludesResponseSchemaResponseTransformer = (data: any) => {
    data.data = appStoreVersionPhasedReleaseSchemaResponseTransformer(data.data);
    return data;
};

export const appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponseTransformer = async (data: any): Promise<AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse> => {
    data = appStoreVersionPhasedReleaseWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

export const appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponseTransformer = async (data: any): Promise<AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse> => {
    data = appStoreVersionSubmissionResponseSchemaResponseTransformer(data);
    return data;
};

const buildWithoutIncludesResponseSchemaResponseTransformer = (data: any) => {
    data.data = buildSchemaResponseTransformer(data.data);
    return data;
};

export const appStoreVersionsBuildGetToOneRelatedResponseTransformer = async (data: any): Promise<AppStoreVersionsBuildGetToOneRelatedResponse> => {
    data = buildWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

const customerReviewsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return customerReviewSchemaResponseTransformer(item);
    });
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return customerReviewResponseV1SchemaResponseTransformer(item);
        });
    }
    return data;
};

export const appStoreVersionsCustomerReviewsGetToManyRelatedResponseTransformer = async (data: any): Promise<AppStoreVersionsCustomerReviewsGetToManyRelatedResponse> => {
    data = customerReviewsResponseSchemaResponseTransformer(data);
    return data;
};

export const appsAppAvailabilityV2GetToOneRelatedResponseTransformer = async (data: any): Promise<AppsAppAvailabilityV2GetToOneRelatedResponse> => {
    data = appAvailabilityV2ResponseSchemaResponseTransformer(data);
    return data;
};

export const appsAppEncryptionDeclarationsGetToManyRelatedResponseTransformer = async (data: any): Promise<AppsAppEncryptionDeclarationsGetToManyRelatedResponse> => {
    data = appEncryptionDeclarationsResponseSchemaResponseTransformer(data);
    return data;
};

const appEventsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return appEventSchemaResponseTransformer(item);
    });
    return data;
};

export const appsAppEventsGetToManyRelatedResponseTransformer = async (data: any): Promise<AppsAppEventsGetToManyRelatedResponse> => {
    data = appEventsResponseSchemaResponseTransformer(data);
    return data;
};

export const appsAppStoreVersionExperimentsV2GetToManyRelatedResponseTransformer = async (data: any): Promise<AppsAppStoreVersionExperimentsV2GetToManyRelatedResponse> => {
    data = appStoreVersionExperimentsV2ResponseSchemaResponseTransformer(data);
    return data;
};

const appStoreVersionsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return appStoreVersionSchemaResponseTransformer(item);
    });
    return data;
};

export const appsAppStoreVersionsGetToManyRelatedResponseTransformer = async (data: any): Promise<AppsAppStoreVersionsGetToManyRelatedResponse> => {
    data = appStoreVersionsResponseSchemaResponseTransformer(data);
    return data;
};

const betaGroupsWithoutIncludesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return betaGroupSchemaResponseTransformer(item);
    });
    return data;
};

export const appsBetaGroupsGetToManyRelatedResponseTransformer = async (data: any): Promise<AppsBetaGroupsGetToManyRelatedResponse> => {
    data = betaGroupsWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

const buildsWithoutIncludesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return buildSchemaResponseTransformer(item);
    });
    return data;
};

export const appsBuildsGetToManyRelatedResponseTransformer = async (data: any): Promise<AppsBuildsGetToManyRelatedResponse> => {
    data = buildsWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

export const appsCiProductGetToOneRelatedResponseTransformer = async (data: any): Promise<AppsCiProductGetToOneRelatedResponse> => {
    data = ciProductResponseSchemaResponseTransformer(data);
    return data;
};

export const appsCustomerReviewsGetToManyRelatedResponseTransformer = async (data: any): Promise<AppsCustomerReviewsGetToManyRelatedResponse> => {
    data = customerReviewsResponseSchemaResponseTransformer(data);
    return data;
};

export const appsReviewSubmissionsGetToManyRelatedResponseTransformer = async (data: any): Promise<AppsReviewSubmissionsGetToManyRelatedResponse> => {
    data = reviewSubmissionsResponseSchemaResponseTransformer(data);
    return data;
};

export const betaAppReviewSubmissionsBuildGetToOneRelatedResponseTransformer = async (data: any): Promise<BetaAppReviewSubmissionsBuildGetToOneRelatedResponse> => {
    data = buildWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

export const betaBuildLocalizationsBuildGetToOneRelatedResponseTransformer = async (data: any): Promise<BetaBuildLocalizationsBuildGetToOneRelatedResponse> => {
    data = buildWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

export const betaGroupsBuildsGetToManyRelatedResponseTransformer = async (data: any): Promise<BetaGroupsBuildsGetToManyRelatedResponse> => {
    data = buildsWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

export const betaTestersBetaGroupsGetToManyRelatedResponseTransformer = async (data: any): Promise<BetaTestersBetaGroupsGetToManyRelatedResponse> => {
    data = betaGroupsWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

export const betaTestersBuildsGetToManyRelatedResponseTransformer = async (data: any): Promise<BetaTestersBuildsGetToManyRelatedResponse> => {
    data = buildsWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

export const buildBetaDetailsBuildGetToOneRelatedResponseTransformer = async (data: any): Promise<BuildBetaDetailsBuildGetToOneRelatedResponse> => {
    data = buildWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

const appClipDomainStatusSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.domains) {
            data.attributes.domains = data.attributes.domains.map((item: any) => {
                if (item.lastUpdatedDate) {
                    item.lastUpdatedDate = new Date(item.lastUpdatedDate);
                }
                return item;
            });
        }
        if (data.attributes.lastUpdatedDate) {
            data.attributes.lastUpdatedDate = new Date(data.attributes.lastUpdatedDate);
        }
        return data.attributes;
    }
    return data;
};

const appClipDomainStatusResponseSchemaResponseTransformer = (data: any) => {
    data.data = appClipDomainStatusSchemaResponseTransformer(data.data);
    return data;
};

export const buildBundlesAppClipDomainCacheStatusGetToOneRelatedResponseTransformer = async (data: any): Promise<BuildBundlesAppClipDomainCacheStatusGetToOneRelatedResponse> => {
    data = appClipDomainStatusResponseSchemaResponseTransformer(data);
    return data;
};

export const buildBundlesAppClipDomainDebugStatusGetToOneRelatedResponseTransformer = async (data: any): Promise<BuildBundlesAppClipDomainDebugStatusGetToOneRelatedResponse> => {
    data = appClipDomainStatusResponseSchemaResponseTransformer(data);
    return data;
};

const appEncryptionDeclarationWithoutIncludesResponseSchemaResponseTransformer = (data: any) => {
    data.data = appEncryptionDeclarationSchemaResponseTransformer(data.data);
    return data;
};

export const buildsAppEncryptionDeclarationGetToOneRelatedResponseTransformer = async (data: any): Promise<BuildsAppEncryptionDeclarationGetToOneRelatedResponse> => {
    data = appEncryptionDeclarationWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

export const buildsAppStoreVersionGetToOneRelatedResponseTransformer = async (data: any): Promise<BuildsAppStoreVersionGetToOneRelatedResponse> => {
    data = appStoreVersionResponseSchemaResponseTransformer(data);
    return data;
};

const betaAppReviewSubmissionWithoutIncludesResponseSchemaResponseTransformer = (data: any) => {
    data.data = betaAppReviewSubmissionSchemaResponseTransformer(data.data);
    return data;
};

export const buildsBetaAppReviewSubmissionGetToOneRelatedResponseTransformer = async (data: any): Promise<BuildsBetaAppReviewSubmissionGetToOneRelatedResponse> => {
    data = betaAppReviewSubmissionWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

export const buildsBuildBetaDetailGetToOneRelatedResponseTransformer = async (data: any): Promise<BuildsBuildBetaDetailGetToOneRelatedResponse> => {
    data = buildBetaDetailResponseSchemaResponseTransformer(data);
    return data;
};

const profilesWithoutIncludesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return profileSchemaResponseTransformer(item);
    });
    return data;
};

export const bundleIdsProfilesGetToManyRelatedResponseTransformer = async (data: any): Promise<BundleIdsProfilesGetToManyRelatedResponse> => {
    data = profilesWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

export const ciBuildActionsBuildRunGetToOneRelatedResponseTransformer = async (data: any): Promise<CiBuildActionsBuildRunGetToOneRelatedResponse> => {
    data = ciBuildRunResponseSchemaResponseTransformer(data);
    return data;
};

const ciBuildActionsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return ciBuildActionSchemaResponseTransformer(item);
    });
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return ciBuildRunSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const ciBuildRunsActionsGetToManyRelatedResponseTransformer = async (data: any): Promise<CiBuildRunsActionsGetToManyRelatedResponse> => {
    data = ciBuildActionsResponseSchemaResponseTransformer(data);
    return data;
};

export const ciBuildRunsBuildsGetToManyRelatedResponseTransformer = async (data: any): Promise<CiBuildRunsBuildsGetToManyRelatedResponse> => {
    data = buildsResponseSchemaResponseTransformer(data);
    return data;
};

export const ciProductsAdditionalRepositoriesGetToManyRelatedResponseTransformer = async (data: any): Promise<CiProductsAdditionalRepositoriesGetToManyRelatedResponse> => {
    data = scmRepositoriesResponseSchemaResponseTransformer(data);
    return data;
};

const ciBuildRunsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return ciBuildRunSchemaResponseTransformer(item);
    });
    return data;
};

export const ciProductsBuildRunsGetToManyRelatedResponseTransformer = async (data: any): Promise<CiProductsBuildRunsGetToManyRelatedResponse> => {
    data = ciBuildRunsResponseSchemaResponseTransformer(data);
    return data;
};

export const ciProductsPrimaryRepositoriesGetToManyRelatedResponseTransformer = async (data: any): Promise<CiProductsPrimaryRepositoriesGetToManyRelatedResponse> => {
    data = scmRepositoriesResponseSchemaResponseTransformer(data);
    return data;
};

const ciWorkflowsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return ciWorkflowSchemaResponseTransformer(item);
    });
    return data;
};

export const ciProductsWorkflowsGetToManyRelatedResponseTransformer = async (data: any): Promise<CiProductsWorkflowsGetToManyRelatedResponse> => {
    data = ciWorkflowsResponseSchemaResponseTransformer(data);
    return data;
};

export const ciWorkflowsBuildRunsGetToManyRelatedResponseTransformer = async (data: any): Promise<CiWorkflowsBuildRunsGetToManyRelatedResponse> => {
    data = ciBuildRunsResponseSchemaResponseTransformer(data);
    return data;
};

export const ciWorkflowsRepositoryGetToOneRelatedResponseTransformer = async (data: any): Promise<CiWorkflowsRepositoryGetToOneRelatedResponse> => {
    data = scmRepositoryResponseSchemaResponseTransformer(data);
    return data;
};

export const customerReviewsResponseGetToOneRelatedResponseTransformer = async (data: any): Promise<CustomerReviewsResponseGetToOneRelatedResponse> => {
    data = customerReviewResponseV1ResponseSchemaResponseTransformer(data);
    return data;
};

const diagnosticLogCallStackNodeSchemaResponseTransformer = (data: any) => {
    if (data.subFrames) {
        data.subFrames = data.subFrames.map((item: any) => {
            return diagnosticLogCallStackNodeSchemaResponseTransformer(item);
        });
    }
    return data;
};

const diagnosticLogsSchemaResponseTransformer = (data: any) => {
    if (data.productData) {
        data.productData = data.productData.map((item: any) => {
            if (item.diagnosticLogs) {
                item.diagnosticLogs = item.diagnosticLogs.map((item: any) => {
                    if (item.callStackTree) {
                        item.callStackTree = item.callStackTree.map((item: any) => {
                            if (item.callStacks) {
                                item.callStacks = item.callStacks.map((item: any) => {
                                    if (item.callStackRootFrames) {
                                        item.callStackRootFrames = item.callStackRootFrames.map((item: any) => {
                                            return diagnosticLogCallStackNodeSchemaResponseTransformer(item);
                                        });
                                    }
                                    return item;
                                });
                            }
                            return item;
                        });
                    }
                    return item;
                });
            }
            return item;
        });
    }
    return data;
};

export const diagnosticSignaturesLogsGetToManyRelatedResponseTransformer = async (data: any): Promise<DiagnosticSignaturesLogsGetToManyRelatedResponse> => {
    data = diagnosticLogsSchemaResponseTransformer(data);
    return data;
};

export const gameCenterAppVersionsAppStoreVersionGetToOneRelatedResponseTransformer = async (data: any): Promise<GameCenterAppVersionsAppStoreVersionGetToOneRelatedResponse> => {
    data = appStoreVersionResponseSchemaResponseTransformer(data);
    return data;
};

const gameCenterLeaderboardsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return gameCenterLeaderboardSchemaResponseTransformer(item);
    });
    return data;
};

export const gameCenterDetailsGameCenterLeaderboardsGetToManyRelatedResponseTransformer = async (data: any): Promise<GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedResponse> => {
    data = gameCenterLeaderboardsResponseSchemaResponseTransformer(data);
    return data;
};

export const gameCenterGroupsGameCenterLeaderboardsGetToManyRelatedResponseTransformer = async (data: any): Promise<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedResponse> => {
    data = gameCenterLeaderboardsResponseSchemaResponseTransformer(data);
    return data;
};

export const gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedResponseTransformer = async (data: any): Promise<GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedResponse> => {
    data = gameCenterLeaderboardResponseSchemaResponseTransformer(data);
    return data;
};

export const gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedResponseTransformer = async (data: any): Promise<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedResponse> => {
    data = gameCenterLeaderboardsResponseSchemaResponseTransformer(data);
    return data;
};

export const gameCenterLeaderboardsGroupLeaderboardGetToOneRelatedResponseTransformer = async (data: any): Promise<GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedResponse> => {
    data = gameCenterLeaderboardResponseSchemaResponseTransformer(data);
    return data;
};

const inAppPurchasePriceSchemaResponseTransformer = (data: any) => {
    if (data.attributes) {
        if (data.attributes.startDate) {
            data.attributes.startDate = new Date(data.attributes.startDate);
        }
        if (data.attributes.endDate) {
            data.attributes.endDate = new Date(data.attributes.endDate);
        }
        return data.attributes;
    }
    return data;
};

const inAppPurchasePricesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return inAppPurchasePriceSchemaResponseTransformer(item);
    });
    return data;
};

export const inAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedResponseTransformer = async (data: any): Promise<InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedResponse> => {
    data = inAppPurchasePricesResponseSchemaResponseTransformer(data);
    return data;
};

export const inAppPurchasePriceSchedulesManualPricesGetToManyRelatedResponseTransformer = async (data: any): Promise<InAppPurchasePriceSchedulesManualPricesGetToManyRelatedResponse> => {
    data = inAppPurchasePricesResponseSchemaResponseTransformer(data);
    return data;
};

export const inAppPurchasesV2ContentGetToOneRelatedResponseTransformer = async (data: any): Promise<InAppPurchasesV2ContentGetToOneRelatedResponse> => {
    data = inAppPurchaseContentResponseSchemaResponseTransformer(data);
    return data;
};

export const preReleaseVersionsBuildsGetToManyRelatedResponseTransformer = async (data: any): Promise<PreReleaseVersionsBuildsGetToManyRelatedResponse> => {
    data = buildsWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

const certificatesWithoutIncludesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return certificateSchemaResponseTransformer(item);
    });
    return data;
};

export const profilesCertificatesGetToManyRelatedResponseTransformer = async (data: any): Promise<ProfilesCertificatesGetToManyRelatedResponse> => {
    data = certificatesWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

const devicesWithoutIncludesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return deviceSchemaResponseTransformer(item);
    });
    return data;
};

export const profilesDevicesGetToManyRelatedResponseTransformer = async (data: any): Promise<ProfilesDevicesGetToManyRelatedResponse> => {
    data = devicesWithoutIncludesResponseSchemaResponseTransformer(data);
    return data;
};

export const scmProvidersRepositoriesGetToManyRelatedResponseTransformer = async (data: any): Promise<ScmProvidersRepositoriesGetToManyRelatedResponse> => {
    data = scmRepositoriesResponseSchemaResponseTransformer(data);
    return data;
};

const scmGitReferencesResponseSchemaResponseTransformer = (data: any) => {
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return scmRepositorySchemaResponseTransformer(item);
        });
    }
    return data;
};

export const scmRepositoriesGitReferencesGetToManyRelatedResponseTransformer = async (data: any): Promise<ScmRepositoriesGitReferencesGetToManyRelatedResponse> => {
    data = scmGitReferencesResponseSchemaResponseTransformer(data);
    return data;
};

const scmPullRequestsResponseSchemaResponseTransformer = (data: any) => {
    if (data.included) {
        data.included = data.included.map((item: any) => {
            return scmRepositorySchemaResponseTransformer(item);
        });
    }
    return data;
};

export const scmRepositoriesPullRequestsGetToManyRelatedResponseTransformer = async (data: any): Promise<ScmRepositoriesPullRequestsGetToManyRelatedResponse> => {
    data = scmPullRequestsResponseSchemaResponseTransformer(data);
    return data;
};

const subscriptionOfferCodeCustomCodesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return subscriptionOfferCodeCustomCodeSchemaResponseTransformer(item);
    });
    return data;
};

export const subscriptionOfferCodesCustomCodesGetToManyRelatedResponseTransformer = async (data: any): Promise<SubscriptionOfferCodesCustomCodesGetToManyRelatedResponse> => {
    data = subscriptionOfferCodeCustomCodesResponseSchemaResponseTransformer(data);
    return data;
};

const subscriptionOfferCodeOneTimeUseCodesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return subscriptionOfferCodeOneTimeUseCodeSchemaResponseTransformer(item);
    });
    return data;
};

export const subscriptionOfferCodesOneTimeUseCodesGetToManyRelatedResponseTransformer = async (data: any): Promise<SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedResponse> => {
    data = subscriptionOfferCodeOneTimeUseCodesResponseSchemaResponseTransformer(data);
    return data;
};

const subscriptionIntroductoryOffersResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return subscriptionIntroductoryOfferSchemaResponseTransformer(item);
    });
    return data;
};

export const subscriptionsIntroductoryOffersGetToManyRelatedResponseTransformer = async (data: any): Promise<SubscriptionsIntroductoryOffersGetToManyRelatedResponse> => {
    data = subscriptionIntroductoryOffersResponseSchemaResponseTransformer(data);
    return data;
};

const subscriptionPricesResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return subscriptionPriceSchemaResponseTransformer(item);
    });
    return data;
};

export const subscriptionsPricesGetToManyRelatedResponseTransformer = async (data: any): Promise<SubscriptionsPricesGetToManyRelatedResponse> => {
    data = subscriptionPricesResponseSchemaResponseTransformer(data);
    return data;
};

const winBackOffersResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return winBackOfferSchemaResponseTransformer(item);
    });
    return data;
};

export const subscriptionsWinBackOffersGetToManyRelatedResponseTransformer = async (data: any): Promise<SubscriptionsWinBackOffersGetToManyRelatedResponse> => {
    data = winBackOffersResponseSchemaResponseTransformer(data);
    return data;
};

const appsBetaTesterUsagesV1MetricResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        if (item.dataPoints) {
            if (item.dataPoints.start) {
                item.dataPoints.start = new Date(item.dataPoints.start);
            }
            if (item.dataPoints.end) {
                item.dataPoints.end = new Date(item.dataPoints.end);
            }
            return item.dataPoints;
        }
        return item;
    });
    return data;
};

export const appsBetaTesterUsagesGetMetricsResponseTransformer = async (data: any): Promise<AppsBetaTesterUsagesGetMetricsResponse> => {
    data = appsBetaTesterUsagesV1MetricResponseSchemaResponseTransformer(data);
    return data;
};

export const betaGroupsBetaTesterUsagesGetMetricsResponseTransformer = async (data: any): Promise<BetaGroupsBetaTesterUsagesGetMetricsResponse> => {
    data = appsBetaTesterUsagesV1MetricResponseSchemaResponseTransformer(data);
    return data;
};

const betaTesterUsagesV1MetricResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        if (item.dataPoints) {
            if (item.dataPoints.start) {
                item.dataPoints.start = new Date(item.dataPoints.start);
            }
            if (item.dataPoints.end) {
                item.dataPoints.end = new Date(item.dataPoints.end);
            }
            return item.dataPoints;
        }
        return item;
    });
    return data;
};

export const betaTestersBetaTesterUsagesGetMetricsResponseTransformer = async (data: any): Promise<BetaTestersBetaTesterUsagesGetMetricsResponse> => {
    data = betaTesterUsagesV1MetricResponseSchemaResponseTransformer(data);
    return data;
};

const betaBuildUsagesV1MetricResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        if (item.dataPoints) {
            if (item.dataPoints.start) {
                item.dataPoints.start = new Date(item.dataPoints.start);
            }
            if (item.dataPoints.end) {
                item.dataPoints.end = new Date(item.dataPoints.end);
            }
            return item.dataPoints;
        }
        return item;
    });
    return data;
};

export const buildsBetaBuildUsagesGetMetricsResponseTransformer = async (data: any): Promise<BuildsBetaBuildUsagesGetMetricsResponse> => {
    data = betaBuildUsagesV1MetricResponseSchemaResponseTransformer(data);
    return data;
};

const gameCenterMatchmakingAppRequestsV1MetricResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        if (item.dataPoints) {
            if (item.dataPoints.start) {
                item.dataPoints.start = new Date(item.dataPoints.start);
            }
            if (item.dataPoints.end) {
                item.dataPoints.end = new Date(item.dataPoints.end);
            }
            return item.dataPoints;
        }
        return item;
    });
    return data;
};

export const gameCenterDetailsClassicMatchmakingRequestsGetMetricsResponseTransformer = async (data: any): Promise<GameCenterDetailsClassicMatchmakingRequestsGetMetricsResponse> => {
    data = gameCenterMatchmakingAppRequestsV1MetricResponseSchemaResponseTransformer(data);
    return data;
};

export const gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsResponseTransformer = async (data: any): Promise<GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsResponse> => {
    data = gameCenterMatchmakingAppRequestsV1MetricResponseSchemaResponseTransformer(data);
    return data;
};

const gameCenterMatchmakingQueueSizesV1MetricResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        if (item.dataPoints) {
            if (item.dataPoints.start) {
                item.dataPoints.start = new Date(item.dataPoints.start);
            }
            if (item.dataPoints.end) {
                item.dataPoints.end = new Date(item.dataPoints.end);
            }
            return item.dataPoints;
        }
        return item;
    });
    return data;
};

export const gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsResponseTransformer = async (data: any): Promise<GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsResponse> => {
    data = gameCenterMatchmakingQueueSizesV1MetricResponseSchemaResponseTransformer(data);
    return data;
};

const gameCenterMatchmakingQueueRequestsV1MetricResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        if (item.dataPoints) {
            if (item.dataPoints.start) {
                item.dataPoints.start = new Date(item.dataPoints.start);
            }
            if (item.dataPoints.end) {
                item.dataPoints.end = new Date(item.dataPoints.end);
            }
            return item.dataPoints;
        }
        return item;
    });
    return data;
};

export const gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsResponseTransformer = async (data: any): Promise<GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsResponse> => {
    data = gameCenterMatchmakingQueueRequestsV1MetricResponseSchemaResponseTransformer(data);
    return data;
};

export const gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsResponseTransformer = async (data: any): Promise<GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsResponse> => {
    data = gameCenterMatchmakingQueueSizesV1MetricResponseSchemaResponseTransformer(data);
    return data;
};

export const gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsResponseTransformer = async (data: any): Promise<GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsResponse> => {
    data = gameCenterMatchmakingQueueRequestsV1MetricResponseSchemaResponseTransformer(data);
    return data;
};

const gameCenterMatchmakingSessionsV1MetricResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        if (item.dataPoints) {
            if (item.dataPoints.start) {
                item.dataPoints.start = new Date(item.dataPoints.start);
            }
            if (item.dataPoints.end) {
                item.dataPoints.end = new Date(item.dataPoints.end);
            }
            return item.dataPoints;
        }
        return item;
    });
    return data;
};

export const gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsResponseTransformer = async (data: any): Promise<GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsResponse> => {
    data = gameCenterMatchmakingSessionsV1MetricResponseSchemaResponseTransformer(data);
    return data;
};

const gameCenterMatchmakingBooleanRuleResultsV1MetricResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        if (item.dataPoints) {
            if (item.dataPoints.start) {
                item.dataPoints.start = new Date(item.dataPoints.start);
            }
            if (item.dataPoints.end) {
                item.dataPoints.end = new Date(item.dataPoints.end);
            }
            return item.dataPoints;
        }
        return item;
    });
    return data;
};

export const gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsResponseTransformer = async (data: any): Promise<GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsResponse> => {
    data = gameCenterMatchmakingBooleanRuleResultsV1MetricResponseSchemaResponseTransformer(data);
    return data;
};

const gameCenterMatchmakingNumberRuleResultsV1MetricResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        if (item.dataPoints) {
            if (item.dataPoints.start) {
                item.dataPoints.start = new Date(item.dataPoints.start);
            }
            if (item.dataPoints.end) {
                item.dataPoints.end = new Date(item.dataPoints.end);
            }
            return item.dataPoints;
        }
        return item;
    });
    return data;
};

export const gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsResponseTransformer = async (data: any): Promise<GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsResponse> => {
    data = gameCenterMatchmakingNumberRuleResultsV1MetricResponseSchemaResponseTransformer(data);
    return data;
};

const gameCenterMatchmakingRuleErrorsV1MetricResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        if (item.dataPoints) {
            if (item.dataPoints.start) {
                item.dataPoints.start = new Date(item.dataPoints.start);
            }
            if (item.dataPoints.end) {
                item.dataPoints.end = new Date(item.dataPoints.end);
            }
            return item.dataPoints;
        }
        return item;
    });
    return data;
};

export const gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsResponseTransformer = async (data: any): Promise<GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsResponse> => {
    data = gameCenterMatchmakingRuleErrorsV1MetricResponseSchemaResponseTransformer(data);
    return data;
};